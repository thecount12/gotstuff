# Modules

* mkdir hello
* cd hello
* go mod init example/hello
* vim hello.go

    package main
    import "fmt"
    func main() {
        fmt.Println("Hello, World!")
    }

## call code from external

* change hello.go
* package main

    import "fmt"
    import "rsc.io/quote"
    func main() {
        fmt.Println(quote.Go())
    }

* go mod tidy
* go run .

## Expand on modules stuff

* mkdir greetings
* cd greetings
* go mod init example.com/greetings
* vim greetings.go

    package greetings
    import "fmt"
    // Hello returns a greeting for the named person.
    func Hello(name string) string {
        // Return a greeting that embeds the name in a message.
        message := fmt.Sprintf("Hi, %v. Welcome!", name)
        return message
    }

* cd ..
* mkdir bazinga
* cd bazinga 
* go mod init example.com/bazinga
* vim bazinga.go

    package main
    import (
        "fmt"
        "example.com/greetings"
    )
    func main() {
        // Get a greeting message and print it.
        message := greetings.Hello("Gladys")
        fmt.Println(message)
    }

* go mod edit -replace example.com/greetings=../greetings
* go mod tidy
* go run .

## Error Handling

* change greetings.go

    package greetings
    import (
        "errors"
        "fmt"
    )
    // Hello returns a greeting for the named person.
    func Hello(name string) (string, error) {
        // If no name was given, return an error with a message.
        if name == "" {
            return "", errors.New("empty name")
        }
        // If a name was received, return a value that embeds the name
        // in a greeting message.
        message := fmt.Sprintf("Hi, %v. Welcome!", name)
        return message, nil
    }

* go back to bazinga.go and add the error features

    package main
    
    import (
        "fmt"
        "log"

        "example.com/greetings"
    )
    
    func main() {
        // Set properties of the predefined Logger, including
        // the log entry prefix and a flag to disable printing
        // the time, source file, and line number.
        log.SetPrefix("greetings: ")
        log.SetFlags(0)

        // Request a greeting message.
        message, err := greetings.Hello("")
        // If an error was returned, print it to the console and
        // exit the program.
        if err != nil {
            log.Fatal(err)
        }

        // If no error was returned, print the returned message
        // to the console.
        fmt.Println(message)
    }



